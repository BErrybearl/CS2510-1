import tester.*;

interface IComparator {

  boolean comesBefore(String s1, String s2);

}

class StringZetabetComp implements IComparator {

  public boolean comesBefore(String s1, String s2) {
    return s1.compareTo(s2) >= 0;
  }

}

class StringLengthComp implements IComparator {

  public boolean comesBefore(String s1, String s2) {
    return s1.length() <= s2.length();
  }
}

interface IList {

  boolean isSorted(IComparator c);

  boolean isSortedHelp(String s, IComparator c);

  IList merge(IList given, IComparator c);

  IList mergeHelper(String given, IComparator c);

  IList insert(String given, IComparator c);

  IList sort(IComparator c);

  boolean sameList(IList given);

  boolean sameCons(ConsLoString given);

}

class MtList implements IList {

  public boolean isSorted(IComparator c) {
    return true;
  }

  public boolean isSortedHelp(String s, IComparator c) {
    return true;
  }

  public IList merge(IList given, IComparator c) {
    return given;
  }

  public IList mergeHelper(String given, IComparator c) {
    return this;
  }

  public IList insert(String given, IComparator c) {
    return new ConsLoString(given, this);
  }

  @Override
  public IList sort(IComparator c) {
    return this;
  }

  public boolean sameList(IList given) {

    return given instanceof MtList;
  }

  public boolean sameCons(ConsLoString given) {
    return false;
  }

}

class ConsLoString implements IList {

  String first;
  IList rest;

  ConsLoString(String first, IList rest) {
    this.first = first;
    this.rest = rest;
  }

  public boolean isSorted(IComparator c) {
    return this.rest.isSortedHelp(first, c);
  }

  public boolean isSortedHelp(String s, IComparator c) {
    return c.comesBefore(s, first) && this.rest.isSorted(c);
  }

  public IList merge(IList given, IComparator c) {
    if (given instanceof MtList) {
      return this;
    }
    else {
      return this.mergeCons((ConsLoString) given, (IComparator) c);
    }
  }

  // merge two sorted conslists into one sorted conslist by the given way
  IList mergeCons(ConsLoString los, IComparator c) {
    return this.mergeHelper(los.first, c).merge(los.rest, c);
  }

  // insert a string into a sorted list by the give way
  public IList mergeHelper(String given, IComparator c) {
    if (c.comesBefore(given, this.first)) {
      return new ConsLoString(given, this);
    }
    else {
      return new ConsLoString(this.first, this.rest.mergeHelper(given, c));
    }
  }

  public IList insert(String given, IComparator c) {
    if (c.comesBefore(given, first)) {
      return new ConsLoString(given, this);
    }
    else {
      return new ConsLoString(this.first, this.rest.insert(given, c));
    }
  }

  public IList sort(IComparator c) {
    return this.rest.sort(c).insert(this.first, c);
  }

  public boolean sameList(IList given) {
    if (given instanceof MtList) {
      return false;
    }
    else {
      return this.sameCons((ConsLoString) given);
    }
  }

  @Override
  public boolean sameCons(ConsLoString given) {
    return this.first.equals(given.first) && this.rest.sameList(given);
  }
}
