import tester.Tester;

class Book {
  String title;
  String author;
  int price;

  Book(String title, String author, int price) {
    this.title = title;
    this.author = author;
    this.price = price;
  }

}

class Circle {
  int radius;

  Circle(int r) {
    this.radius = r;
  }

}

interface IList<T> {
  IList<T> append(IList<T> l);

  IList<T> appendHelper(IList<T> l2);

  <U> IList<U> map(IFunc<T, U> f);

  IList<T> filter(IFunc<T, Boolean> f);

  <U> U accept(IListVisitor<T, U> v);
}

class MtList<T> implements IList<T> {

  public IList<T> append(IList<T> l) {
    return l;
  }

  public IList<T> appendHelper(IList<T> l2) {
    return l2;
  }

  public <U> IList<U> map(IFunc<T, U> f) {
    return new MtList<U>();
  }

  public IList<T> filter(IFunc<T, Boolean> f) {
    return this;
  }

  public <U> U accept(IListVisitor<T, U> v) {
    return v.visit(this);
  }
}

class ConsList<T> implements IList<T> {
  T first;
  IList<T> rest;

  ConsList(T first, IList<T> rest) {
    this.first = first;
    this.rest = rest;
  }

  public IList<T> append(IList<T> l) {
    return l.appendHelper(this);
  }

  public IList<T> appendHelper(IList<T> l2) {
    return new ConsList<T>(this.first, this.rest.appendHelper(l2));
  }

  public <U> IList<U> map(IFunc<T, U> f) {
    return new ConsList<U>(f.apply(this.first), this.rest.map(f));
  }

  public IList<T> filter(IFunc<T, Boolean> f) {
    if (f.apply(this.first)) {
      return new ConsList<T>(this.first, this.rest.filter(f));
    }
    else {
      return this.rest.filter(f);
    }
  }

  public <U> U accept(IListVisitor<T, U> v) {
    return v.visit(this);
  }
}


interface IFunc<T, U> {
  U apply(T t);
}


class BookTitle implements IFunc<Book, String> {
  public String apply(Book book) {
      return book.title;
  }
}

class BookPrice implements IFunc<Book, Integer> {

  public Integer apply(Book book) {
    return book.price;
  }
}


class CircleArea implements IFunc<Circle, Double> {

  public Double apply(Circle cir) {
    return Math.PI * cir.radius * cir.radius;
  }
}




interface IListVisitor<T, U> {
  U visit(MtList<T> mt);

  U visit(ConsList<T> cons);
}

class MapVisitor<T, U> implements IListVisitor<T, IList<U>> {
  IFunc<T, U> f;

  MapVisitor(IFunc<T, U> f) {
    this.f = f;
  }

  public IList<U> visit(MtList<T> mt) {
    return new MtList<U>();
  }

  public IList<U> visit(ConsList<T> cons) {
    return new ConsList<U>(f.apply(cons.first), cons.rest.accept(this));
  }

}

class FilterVisitor<T> implements IListVisitor<T, IList<T>> {
  IFunc<T, Boolean> f;

  FilterVisitor(IFunc<T, Boolean> f) {
    this.f = f;
  }

  public IList<T> visit(MtList<T> mt) {
    return new MtList<T>();
  }

  public IList<T> visit(ConsList<T> cons) {
    if (f.apply(cons.first)) {
      return new ConsList<T>(cons.first, cons.rest.accept(this));
    }
    else {
      return cons.rest.accept(this);
    }
  }
}

class ExamplesList {
  
}