abstract class ABST<T> {
  
  IComparator<T> order;
  
  ABST(IComparator<T> order) {
    this.order = order;
  }
  
}

class Leaf<T> extends ABST<T> {

  Leaf(IComparator<T> order) {
    super(order);
  }
  
  
}

class Node<T> extends ABST<T> {

  T data;
  ABST<T> left;
  ABST<T> right;
  
  Node(IComparator<T> order, T data, ABST<T> left, ABST<T> right) {
    super(order);
    this.data = data;
    this.left = left;
    this.right = right;
  }
  
}

interface IComparator<T> {
  
  int compare(T t1, T t2);
  
}

class BooksByTitle implements IComparator<Book> {
  

  public int compare(Book b1, Book b2) {
    return b1.title.compareTo(b2.title);
  
  }

}

class BookByAuthor implements IComparator<Book> {

  public int compare(Book b1, Book b2) {
    return b1.author.compareTo(b2.author);
  }
  
}

class BooksByPrice implements IComparator<Book> {
  

  public int compare(Book b1, Book b2) {
    return b1.price - b2.price  ;
  
  }

}

interface IList<T> {
  
}

class MtList<T> implements IList<T> {
  
}

class ConsList<T> implements IList<T> {
  T first;
  IList<T> rest;
  
  ConsList(T first, IList<T> rest) {
    this.first = first;
    this.rest = rest;
  }
}



class Book {
  
  String title;
  String author;
  int price;
  
  Book(String title, String author, int price) {
    this.title = title;
    this.author = author;
    this.price = price;
  }
  
  public boolean sameBook(Book given) {
    return this.title.equals(given.title)
        && this.author.equals(given.author)
        && this.price == given.price;
  }
}