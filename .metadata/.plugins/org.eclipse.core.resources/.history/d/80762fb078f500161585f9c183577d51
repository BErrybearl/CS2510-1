import tester.*;

interface IComparator<T> {
  // Returns a negative number if t1 comes before t2 in this ordering
  // Returns zero if t1 is the same as t2 in this ordering
  // Returns a positive number if t1 comes after t2 in this ordering
  int compare(T t1, T t2);
}

class StringLengthCompGen implements IComparator<String> {

  public int compare(String s1, String s2) {
    if (s1.length() < s2.length()) {
      return -1;
    }
    else if (s1.length() == s2.length()) {
      return 0;
    }
    else {
      return 1;
    }
  }
}

class StringZetabetCompGen implements IComparator<String> {

  public int compare(String t1, String t2) {
    return t1.compareTo(t2);
  }
}

interface IList<T> {

  boolean isSorted(IComparator<T> c);

  boolean isSortedHelp(T s, IComparator<T> c);

  IList<T> merge(IList<T> given, IComparator<T> c);

  IList<T> mergeHelper(T given, IComparator<T> c);

  IList<T> insert(T given, IComparator<T> c);

  IList<T> sort(IComparator<T> c);

  boolean sameList(IList<T> given, IComparator c);

  boolean sameMt(MtList<T> given);

  boolean sameCons(ConsList<T> given, IComparator c);
}

class MtList<T> implements IList<T> {

  public boolean isSorted(IComparator<T> c) {
    return true;
  }

  public boolean isSortedHelp(T s, IComparator<T> c) {
    return true;
  }

  public IList<T> merge(IList<T> given, IComparator<T> c) {
    return given;
  }

  public IList<T> mergeHelper(T given, IComparator<T> c) {
    return this;
  }

  @Override
  public IList<T> insert(T given, IComparator<T> c) {
    return new ConsList<T>(given, this);
  }

  public IList<T> sort(IComparator<T> c) {
    return this;
  }

  public boolean sameList(IList<T> given, IComparator c) {
    return given.sameMt(this);
  }

  public boolean sameMt(MtList<T> given) {
    return true;
  }

  public boolean sameCons(ConsList<T> given, IComparator c) {
    return false;
  }
}

class ConsList<T> implements IList<T> {

  T first;
  IList<T> rest;

  ConsList(T first, IList<T> rest) {
    this.first = first;
    this.rest = rest;
  }

  @Override
  public boolean isSorted(IComparator<T> c) {
    return this.rest.isSortedHelp(first, c);
  }

  public boolean isSortedHelp(T s, IComparator<T> c) {
    if (c.compare(s, first) <= 0) {
      return this.rest.isSorted(c);
    }
    else {
      return false;
    }
  }

  public IList<T> merge(IList<T> given, IComparator<T> c) {
    if (given instanceof MtList) {
      return this;
    }
    else {
      return this.mergeCons((ConsList<T>) given, c);
    }
  }

  IList<T> mergeCons(ConsList<T> given, IComparator<T> c) {
    return this.mergeHelper(given.first, c).merge(given.rest, c);
  }

  public IList<T> mergeHelper(T given, IComparator<T> c) {
    if (c.compare(given, first) <= 0) {
      return new ConsList<T>(given, this);
    }
    else {
      return new ConsList<T>(this.first, this.rest.mergeHelper(given, c));
    }
  }

  public IList<T> insert(T given, IComparator<T> c) {
    if (c.compare(given, first) <= 0) {
      return new ConsList<T>(given, this);
    }
    else {
      return new ConsList<T>(this.first, this.rest.insert(given, c));
    }
  }

  public IList<T> sort(IComparator<T> c) {
    return this.rest.sort(c).insert(this.first, c);
  }

  @Override
  public boolean sameList(IList<T> given, IComparator c) {
    return given.sameCons(this, c);
  }

  @Override
  public boolean sameMt(MtList<T> given) {
    return false;
  }

  public boolean sameCons(ConsList<T> given, IComparator c) {
    return this.first.equals(given.first) && this.rest.sameList(given.rest, c);
  }
}

class ExamplesStringsGenTests {


  IList<String> los1 = new MtList<String>();
  IList<String> los2 = new ConsList<String>("universally", los1);
  IList<String> los3 = new ConsList<String>("distortion", los2);
  IList<String> los4 = new ConsList<String>("fuzz", los3);
  IList<String> los5 = new ConsList<String>("dream", los1);
  IList<String> los6 = new ConsList<String>("excessive", los5);
  IList<String> los7 = new ConsList<String>("web", los6);

  IComparator<String> lexcomp = new StringZetabetCompGen();
  IComparator<String> lencomp = new StringLengthCompGen();

  
  boolean testIsSorted(Tester t) {
    return t.checkExpect(los1.isSorted(lencomp), true)
        && t.checkExpect(los2.isSorted(lencomp), true)
        && t.checkExpect(los3.isSorted(lexcomp), true)
        && t.checkExpect(los4.isSorted(lexcomp), false);

  }

  boolean testIsSortedHelp(Tester t) {
    return t.checkExpect(los1.isSortedHelp("", lencomp), true)
        && t.checkExpect(los2.isSortedHelp("", lencomp), true)
        && t.checkExpect(los3.isSortedHelp("", lexcomp), true)
        && t.checkExpect(los4.isSortedHelp("", lexcomp), true);
  }

  boolean testMerge(Tester t) {
    return t.checkExpect(los1.sameList(los1, lencomp), true) 
        && t.checkExpect(los2.sameList(los2, lencomp), false)
        && t.checkExpect(los3.sameList(los3, lencomp), false) 
        && t.checkExpect(los4.sameList(los4, lencomp), false);
  }

  boolean testMergeHelper(Tester t) {
    return t.checkExpect(los1.mergeHelper("", lencomp), los1)
        && t.checkExpect(los2.mergeHelper("", lencomp), new ConsList<String>("", los2))
        && t.checkExpect(los3.mergeHelper("a", lexcomp), new ConsList<String>("a", los3))
        && t.checkExpect(los4.mergeHelper("bc", lexcomp), new ConsList<String>("bc", los4));
  }

  boolean testInsert(Tester t) {
    return t.checkExpect(los1.insert("a", lencomp), new ConsList<String>("a", los1))
        && t.checkExpect(los2.insert("bc", lencomp), new ConsList<String>("bc", los2))
        && t.checkExpect(los3.insert("def", lexcomp),
            new ConsList<String>("def", new ConsList<String>("distortion",
                new ConsList<String>("universally", los1))))
        && t.checkExpect(los4.insert("ghij", lexcomp), new ConsList<String>("fuzz", new ConsList<String>("distortion", new ConsList<String>("ghij", los2))));
  }

  boolean testSort(Tester t) {
    return t.checkExpect(los1.sort(lexcomp), los1)
        && t.checkExpect(los2.sort(lexcomp), new ConsList<String>("universally", los1))
        && t.checkExpect(los3.sort(lencomp),
            new ConsList<String>("distortion", new ConsList<String>("universally", los1)))
        && t.checkExpect(los4.sort(lencomp), new ConsList<String>("fuzz",
            new ConsList<String>("distortion", new ConsList<String>("universally", los1))));
  }

  boolean testSameMt(Tester t) {
    return t.checkExpect(los1.sameMt((MtList<String>) los1), true);

  }

  boolean testSameCons(Tester t) {
    return t.checkExpect(los2.sameCons((ConsList<String>) los4, lencomp), false)
        && t.checkExpect(los2.sameCons((ConsList<String>) los2, lencomp), false)
        && t.checkExpect(los4.sameCons((ConsList<String>) los4, lencomp), false);

  }

}

