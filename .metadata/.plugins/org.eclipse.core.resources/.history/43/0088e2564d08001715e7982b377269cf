
import tester.*;

// runs tests for the buddies problem
public class ExamplesBuddies {

  Person ann;
  Person bob;
  Person cole;
  Person dan;
  Person ed;
  Person fay;
  Person gabi;
  Person hank;
  Person jan;
  Person kim;
  Person len;

  ILoBuddy mtb;

  void initBuddies() {

    ann = new Person("Ann");
    bob = new Person("Bob");
    cole = new Person("Cole");
    dan = new Person("Dan");
    ed = new Person("Ed");
    fay = new Person("Fay");
    gabi = new Person("Gabi");
    hank = new Person("Hank");
    jan = new Person("Jan");
    kim = new Person("Kim");
    len = new Person("Len");

    
    this.ann.buddies = new ConsLoBuddy(this.bob, new ConsLoBuddy(this.cole,
        this.mtb));
this.bob.buddies = new ConsLoBuddy(this.ann, new ConsLoBuddy(this.ed,
        new ConsLoBuddy(this.hank, this.mtb)));
this.cole.buddies = new ConsLoBuddy(this.dan, this.mtb);
this.dan.buddies = new ConsLoBuddy(this.cole, this.mtb);
this.ed.buddies = new ConsLoBuddy(this.fay, this.mtb);
this.fay.buddies = new ConsLoBuddy(this.ed, new ConsLoBuddy(this.gabi,
        this.mtb));
this.gabi.buddies = new ConsLoBuddy(this.ed, new ConsLoBuddy(this.fay,
        this.mtb));
this.jan.buddies = new ConsLoBuddy(this.kim, new ConsLoBuddy(this.len,
        this.mtb));
this.kim.buddies = new ConsLoBuddy(this.jan, new ConsLoBuddy(this.len,
        this.mtb));
this.len.buddies = new ConsLoBuddy(this.jan, new ConsLoBuddy(this.kim,
        this.mtb));
//    mt = new MTLoBuddy();
//
//    ann.addBuddies(bob);
//    ann.addBuddies(cole);
//    bob.addBuddies(ann);
//    bob.addBuddies(ed);
//    bob.addBuddies(hank);
//    cole.addBuddies(dan);
//    dan.addBuddies(cole);
//    ed.addBuddies(fay);
//    fay.addBuddies(ed);
//    fay.addBuddies(gabi);
//    gabi.addBuddies(ed);
//    gabi.addBuddies(fay);
//    jan.addBuddies(kim);
//    jan.addBuddies(len);
//    kim.addBuddies(jan);
//    kim.addBuddies(len);
//    len.addBuddies(jan);
//    len.addBuddies(kim);
  
  }

  boolean testHasDirectBuddy(Tester t) {
    initBuddies();
    return t.checkExpect(ann.hasDirectBuddy(bob), true)
        && t.checkExpect(ann.hasDirectBuddy(cole), true)
        && t.checkExpect(ann.hasDirectBuddy(dan), false)
        && t.checkExpect(hank.hasDirectBuddy(ann), false);
  }
  
  boolean testCountCommonBuddies(Tester t) {
    initBuddies();
    return t.checkExpect(ann.countCommonBuddies(bob), 0)
        && t.checkExpect(ann.countCommonBuddies(hank), 0)
        && t.checkExpect(ann.countCommonBuddies(dan), 1)
        && t.checkExpect(jan.countCommonBuddies(kim), 1)
        && t.checkExpect(ann.buddies.countCommonBuddies(kim), 0);
  }
  
  boolean testHasExtendedBuddy(Tester t) {
    initBuddies();
    return t.checkExpect(ann.hasExtendedBuddy(bob), true)
        && t.checkExpect(ann.hasExtendedBuddy(ed), false)
        && t.checkExpect(ann.hasExtendedBuddy(jan), false)
        && t.checkExpect(hank.hasExtendedBuddy(ann), true);
  }
  
  boolean testPartyCount(Tester t) {
    initBuddies();
    return t.checkExpect(ann.partyCount(), 8)
        && t.checkExpect(dan.partyCount(), 1)
        && t.checkExpect(jan.partyCount(), 3)
        && t.checkExpect(hank.partyCount(), 0);
  }
//  boolean testIndirectInv(Tester t) {
//    initBuddies();
//    return t.checkExpect(ann.hasDirectBuddy(bob), true);
//  }
//  
}