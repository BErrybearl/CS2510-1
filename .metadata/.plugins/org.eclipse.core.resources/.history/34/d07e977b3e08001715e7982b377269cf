
import tester.*;

// runs tests for the buddies problem
public class ExamplesBuddies {

  Person ann;
  Person bob;
  Person cole;
  Person dan;
  Person ed;
  Person fay;
  Person gabi;
  Person hank;
  Person jan;
  Person kim;
  Person len;

  ILoBuddy mt;

  void initBuddies() {

    ann = new Person("Ann");
    bob = new Person("Bob");
    cole = new Person("Cole");
    dan = new Person("Dan");
    ed = new Person("Ed");
    fay = new Person("Fay");
    gabi = new Person("Gabi");
    hank = new Person("Hank");
    jan = new Person("Jan");
    kim = new Person("Kim");
    len = new Person("Len");

    mt = new MTLoBuddy();

    ann.addBuddies(bob);
    ann.addBuddies(cole);
    bob.addBuddies(ann);
    bob.addBuddies(ed);
    bob.addBuddies(hank);
    cole.addBuddies(dan);
    dan.addBuddies(cole);
    ed.addBuddies(fay);
    fay.addBuddies(ed);
    fay.addBuddies(gabi);
    gabi.addBuddies(ed);
    gabi.addBuddies(fay);
    jan.addBuddies(kim);
    jan.addBuddies(len);
    kim.addBuddies(jan);
    kim.addBuddies(len);
    len.addBuddies(jan);
    len.addBuddies(kim);
  
  }

  boolean testHasDirectBuddy(Tester t) {
    initBuddies();
    return t.checkExpect(ann.hasDirectBuddy(bob), true)
        && t.checkExpect(ann.hasDirectBuddy(cole), true)
        && t.checkExpect(ann.hasDirectBuddy(dan), false)
        && t.checkExpect(hank.hasDirectBuddy(ann), false);
  }
  
  boolean testCountCommonBuddies(Tester t) {
    initBuddies();
    return t.checkExpect(ann.countCommonBuddies(bob), 0)
        && t.checkExpect(ann.hasDirectBuddy(hank), 0)
        && t.checkExpect(ann.hasDirectBuddy(dan), 1)
        && t.checkExpect(jan.hasDirectBuddy(kim), 1);
  }
//  boolean testHasExtendedBuddy(Tester t) {
//    initBuddies();
//    return t.checkExpect(ann.hasDirectBuddy(bob), true);
//  }
//  boolean testPartyCount(Tester t) {
//    initBuddies();
//    return t.checkExpect(ann.hasDirectBuddy(bob), true);
//  }
//  boolean testIndirectInv(Tester t) {
//    initBuddies();
//    return t.checkExpect(ann.hasDirectBuddy(bob), true);
//  }
//  
//  boolean testCountHelper(Tester t) {
//    initBuddies();
//    return t.checkExpect(ann.hasDirectBuddy(bob), true);
//  }
}