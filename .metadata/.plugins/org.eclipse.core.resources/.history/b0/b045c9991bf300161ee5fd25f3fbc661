interface Tree {
  
  int largest();
}

class Leaf implements Tree {
  int nat;
  
  Leaf(int nat) {
    this.nat = nat;
  }

  @Override
  public int largest() {
    return nat;
  }
}

class Lefty implements Tree {
  Tree left;
  int nat;
  
  Lefty(Tree left, int nat) {
    this.left = left;
    this.nat = nat;
  }

  @Override
  public int largest() {
    if (nat >= left.largest())
      return nat;
    else {
      return this.left.largest();
    }
  }
}

class Righty implements Tree {
  Tree right;
  int nat;
  
  Righty(Tree right, int nat) {
    this.right = right;
    this.nat = nat;
  }

  public int largest() {
    if (nat >= right.largest())
      return nat;
    else {
      return this.right.largest();
    }
  }
}

class Fork implements Tree {
  Tree tree1;
  Tree tree2;
  
  Fork(Tree tree1, Tree tree2) {
    this.tree1 = tree1;
    this.tree2 = tree2;
  }

  @Override
  public int largest() {
    if (this.tree1.largest() >= tree2.largest()) {
      return tree1.largest();
    }
    else {
      return tree2.largest();
    }
      
  }
}



class Server {
  String name;
  int cpu;
  int ram;
  int price;
  
  Server(String name, int cpu, int ram, int price) {
    this.name = name;
    this.cpu  = cpu;
    this.ram = ram;
    this.price = price;
  }
}

interface ILoServer {
  
  boolean hasHost(Server m);
  
  ILoServer upgradeRam(Server m, ILoServer given, int r);
}

class MtLoServer implements ILoServer {

  
  public boolean hasHost(Server m) {
    return false;
  }

  @Override
  public ILoServer upgradeRam(Server m, ILoServer given, int r) {
    // TODO Auto-generated method stub
    return this;
  }
  
}

class ConsLoServer implements ILoServer {
  Server first;
  ILoServer rest;
  
  ConsLoServer(Server first, ILoServer rest) {
    this.first = first;
    this.rest = rest;
    
    
  }

  @Override
  public boolean hasHost(Server m) {
    return first.name.equals(m.name) || rest.hasHost(m);
  }

  @Override
  public ILoServer upgradeRam(Server m, ILoServer given, int r) {
    if (first.name.equals(m.name)) {
      return new ConsLoServer(new Server(first.name, first.cpu, first.price, r), rest.upgradeRam(m, given, r));
    }
    else {
      return new ConsLoServer(first, rest.upgradeRam(m, given, r));
    }
  }
}
